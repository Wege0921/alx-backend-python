pipeline {
    agent any
    options { timestamps() }

    environment {
        VENV = '.venv'
        PYTHON = 'python3'
        IMAGE_NAME = 'your-dockerhub-username/messaging-app:latest'
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'github-creds',
                    url: 'https://github.com/Wege0921/alx-backend-python.git',
                    branch: 'main'

                // Show current git branch
                sh 'git branch'
            }
        }

        stage('Set up Python env') {
            steps {
                sh '''
                    set -eux
                    ${PYTHON} --version
                    ${PYTHON} -m venv ${VENV}
                    . ${VENV}/bin/activate
                    pip3 install --upgrade pip
                    if [ -f messaging_app/requirements.txt ]; then
                        pip3 install -r messaging_app/requirements.txt
                    fi
                    pip3 install pytest pytest-html parameterized
                '''
            }
        }

        stage('Run tests') {
            steps {
                sh '''
                    set -eux
                    . ${VENV}/bin/activate
                    pytest messaging_app --junitxml=pytest-report.xml --html=pytest-report.html --self-contained-html
                '''
            }
            post {
                always {
                    junit testResults: 'pytest-report.xml', allowEmptyResults: true
                    archiveArtifacts artifacts: 'pytest-report.xml, pytest-report.html', allowEmptyArchive: true, fingerprint: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                        cd messaging_app
                        docker build -t ${IMAGE_NAME} .
                    '''
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push ${IMAGE_NAME}
                    '''
                }
            }
        }
    }
}
